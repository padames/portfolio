{
  "hash": "4b8500edf42fccc34dd5c2f52ec36f1f",
  "result": {
    "markdown": "---\ntitle: \"How to process any text with Unicode\"\nauthor: \"Pablo Adames\"\ndate: \"2025-01-21\"\ncategories: [text, C++, Unicode, Rust, R]\nbibliography: references.bib\ncsl: elsevier-vancouver.csl\nformat: html\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\n---\n\n\n## Text is everywhere\n\nChatbots, web pages, and stand-alone applications display information on the screens of our cell phones, home and office computers, at airports, bus and train stations. The text used in these scenarios enables clear communication in any of the languages used in the world. Text is not impeded by sound or obstructed by environmental noise and can deliver impact and meaning through semantically dense symbols reinforced by other visual or aural cues.\n\nText and written human language are, at their core, technologies developed to build and transmit culture. Accurate textual information is critical in international trade, e-commerce, and customer-facing software. It is safe to say that text has a fundamental role in sustaining our civilization.\n\n![Image credit: https://neuroflash.com/blog/automatic-text-editor-online/](https://neuroflash.com/wp-content/uploads/2022/09/feature-image-automatic-text-editor-online.jpg)\n\n## What is text anyway?\n\nTo narrow the scope of this post to a manageable size, let's constrain the answer to the world of computer languages. These are used to tell computers what to do when they receive data.\n\nComputer programming starts by writing instructions in a text editor. The characters used to form those instructions were initially called the ASCII characters. These characters conveniently reflected the characters of the English alphabet plus the Arabic numerals and exclamation and punctuation marks.\n\nIn this context, text is used for two purposes. One is to write human-readable instructions for a computer to perform a task, the other is to be the data for the instructions to act upon.\n\n## How do we use text as code?\n\nThe instructions that a computer program are made of have to be interpreted and then transformed into machine-readable code before the machine can execute them. The first step implies parsing the text into functional parts: line breaks, plain data, commands, operators, variable and function names.\n\nThe next step is to put those components into an abstract syntax tree (AST) that represents the program. The AST is then further converted into bite code instructions for a run time or into machine instructions to be executed by the operating system scheduler in a process under its supervision, or even directly in to the microchip clock scheduler of a single board computer in the case of real time embedded systems.\n\n<!-- Everybody benefits from using text instead of programming directly using the instructions of the operating system or the bite code commands. Somehow using ASCII makes programming a computer a skill similar to learning one of the human languages. However, bias always favours the English-speaking programmer who knows how English reads. -->\n\n<!-- Accepting the historical facts, let's dive into the ASCII character set. Its purpose is for programmers to encode rules that control the computer as it consumes input and produces output. We call these rules the program's logic. -->\n\nThe input to and output from the program we call data. Digital computers natively process only zeros and ones. The text, images and sound supplied to a computer must be transformed first into a sequence of these two values.\n\nText as code is handled relatively well with a small character set. How about the handling of text, images, and sound as data?\n\n## Entering text encoding\n\nRestraining myself to write about text only, I am ready to discuss the transformation of what we see as text in our preferred language into bits. A computer program must discern what part of those zeros and ones represent text and put together a message to act on it, whether it is displaying it on a screen, writing to a database, or \"launching the missiles\", so to speak. Welcome to text decoding and encoding.\n\nThe complexity of this subject arises from the fact that human communication occurs within rich, dynamic, and diverse cultural contexts. Tradition, convention, identity, and art influence the glyphs and alphabets used to articulate words, sentences and, ultimately, ideas in human languages. Furthermore, each written language has rules for what a sentence and a word are, the direction of writing, what punctuation is, etc. It is easy to imagine that text can be as diverse as the human groups that use it.\n\nHow do we address this complexity? We use text encoding that machines can understand automatically and unequivocally. The accepted encoding standard is called Unicode. I will quote directly from the Unicode standard definition #51 @uni16:emoji.\n\n> Unicode is the foundation for text in all modern software: it's how all mobile phones, desktops, and other computers represent the text of every language.\n\nA good source of interesting information on Unicode can be found in the web page called the [Unicode Primer](https://www.unifont.org/unicodeprimer/). Only to give an idea of an interpretation of the 1,112,064 valid Unicode values or code points, have a squinting look at an image at of the Unifont character map. Just for context the ASCII characters fit in less than the first full row on this table.\n\n![Figure 1. The Unifont full charcater map. Image Credit: https://free-images.com/or/8728/unifont_full_map_png.png](https://free-images.com/or/8728/unifont_full_map_png.png)\n\nA font table like the one above is needed to render the Unicode characters or glyphs from their numerical values. There are currently a total of 1,112,064 valid Unicode values or code points. These are scalar values represented in base-16 (using the digits and the letters A to F), their range of values can be seen in Table 1 below. The first 128 code points correspond to the original ASCII and yes you may try to go back to the Unifont table to find them on the first row.\n\nIndependent of the artistic design of the font, the Unicode values appear in official tables associated with the typographical or artistic rendition of the glyph they represent. Long before and after they are rendered to a screen or printer, each character is treated as a series of numbers.\n\nThe text encodings address the challenge of writing effectively in binary. Text consists of a sequence of characters, usually stored in contiguous memory. The encoding schema must also address the identification of character boundaries when all the program sees is endless zeros and ones.\n\n### A Journey from text to bits and back\n\nTo illustrate the modern context in which we process text let's consider a chat application for customer support in a mobile device, see the Figure 2 below. Text is entered on the mobile device through a virtual keyboard, rendered on screen, transformed ultimately into a byte stream with an UTF-8 encoding and sent through the wire/air using Internet protocols. On the receiving end, the bytes of zeros and ones are decoded into UTF-8, further transformed if necessary, interpreted using the indicated language and then displayed on the computer screen of the Browser used by the Customer Support agent to interact with the customer.\n\n![Figure 2. The journey of a text message entered in a chat application in a mobile device to its destination in a computer screen of a customer support agent. Text does the same journey in the opposite direction when the support agent responds.](text_journey.png)\n\nText encoding is a mapping from the code points to some efficient way to write text in binary. A fixed bit width for each character would simplify parsing characters within some text sequence and it would make character boundaries trivial to infer, however, it would waste much space when representing the small ASCII characters. On the other side if we choose a variable bit width then space would be saved with the small values but an end-of-character marker would be required, also adding extra space and complexity.\n\nThe common Unicode text encoding to write source code in modern computer languages is called UTF-8, it is the encoding used to store the text of almost the entirety of the web pages of the Internet. UTF stands for the Unicode Transformation Format @enwiki:1268238400_. This is a super set of the ASCII character set used in the first computer languages like COBOL, FORTRAN and BASIC.\n\n| Range of Code Points      | Byte 1   | Byte 2   | Byte 3   | Byte 4   |\n|---------------------------|----------|----------|----------|----------|\n| From U+0000 to U007F      | 0yyyzzzz |          |          |          |\n| From U+0080 to U+07FF     | 110xxxyy | 10yyzzzz |          |          |\n| From U+0800 to U+FFFF     | 1110wwww | 10xxxxyy | 10yyzzzz |          |\n| From U+010000 to U+10FFFF | 11110uvv | 10vvwwww | 10xxxxyy | 10yyzzzz |\n\n: Table 1. Code point to UTF-8 encoding, from @convertcodes:encodeformats {.striped .hover}\n\nThe code values or code points in Table 1 have a corresponding multi-byte representation in UTF-8 form, the encoding has a variable number of bytes. How many bytes is encoded by the number of consecutive ones in the most significant digits of the first byte in a byte sequence: none means the current byte is sufficient to encode the character fully, that is, it fits in one byte, e.g. an ASCII character. One means the byte is part of a multi-byte sequence. Two means the byte marks the start of a character encoded in two bytes in total. Three and four ones mean the equivalent, the byte marks the beginning of characters represented by three and four bytes respectively, including the leading one. Table 2 shows examples of each one of these cases.\n\n| Character | Code point | Byte 1   | Byte 2   | Byte 3   | Byte 4   |\n|-----------|------------|----------|----------|----------|----------|\n| H         | U+0048     | 01001000 |          |          |          |\n| á         | U+00E1     | 11000011 | 10100001 |          |          |\n| ᜋ         | U+170B     | 11100001 | 10011100 | 10001011 |          |\n| 🍇        | U+01F347   | 11110000 | 10011111 | 10001101 | 10000111 |\n\n: Table 2. Examples of UTF-8 bytes for characters in each of the ranges of Unicode points presented in Table 1. {.striped .hover}\n\nThis means that there is no need for escape sequences to mark the boundary of a single encoded multi-byte character. It also mean there is no need of a special marker for characters boundaries in a sequence of many characters. In addition to that it isolates semantic representation from character identification. Unicode encoding takes care of character boundaries but semantic parsing takes care of instruction or operator boundary.\n\n## Trade-offs of choosing a Unicode encoding\n\nThe code points can be encoded in three forms: UTF-8, UTF-16 and UTF-32. Each encoding maps the code points to unique code unit sequences of variable length @uni16:encodingforms. In particular, the larger code points need multiple single code units if using the code form UTF-8. Conversely they may fit into a single code unit if encoded in UTF-32. This happens because the width of the smallest code unit is 8, 16, or 32 bits respectively for each of the forms. See Table 3 below for a comparison of three different encodings for a text sentence using short and long code points.\n\n| Encoding | Hexadecimal                                                                                        |\n|-----------------|-------------------------------------------------------|\n| UTF-8    | 48 65 6c 6c 6f 20 f0 9f 8d 87 2c 20 f0 9f 8d 88 21                                                 |\n| UTF-16   | 0048 0065 006c 006c 006f 0020 d83c df47 002c 0020 d83c df48 0021                                   |\n| UTF-32   | 00000048 00000065 0000006c 0000006c 0000006f 00000020 0001f347 0000002c 00000020 0001f348 00000021 |\n\n: Table 3. Unicode encoding of the sentence `Hello 🍇, 🍈!` from the website [Convert Codes](https://convertcodes.com/unicode-converter-encode-decode-utf/) {.striped .hover}\n\nThe long code points for the fruit emojis occupy a single UTF-32 code unit, look at 0001f347 and 0001f348, `🍇` and `🍈` in Table 4 below. from the same table one sees how these long codes require two code units in UTF-16 and four in UTF-8. That means more processing to read and write as more code units are required.\n\nThe selection of a encoding form to map code points to code units forces a trade off between space and complexity. UTF-8 is very efficient for handling the smaller Unicode values while it is complex to handle the large ones. Conversely, UTF-32 is wasteful for storing the smaller values but simple for the higher ones.\n\nWindows chose to use UTF-16 natively since the NT version. It is efficient for the Asian alphabets that require at least two code points in UTF-8 but one in UTF-16 for most of their characters.\n\nConsider the following emojis, their Unicode values and their multi-byte representation in three different encodings:\n\n| fruit emoji | name       | Unicode point | UTF-8       | UTF-16     | UTF-32   |\n|-------------|------------|---------------|-------------|------------|----------|\n| 🍇          | grapes     | U+1F347       | f0 9f 8d 87 | d83c udf47 | 0001f347 |\n| 🍈          | melon      | U+1F348       | f0 9f 8d 88 | d83c df48  | 0001f348 |\n| 🍉          | watermelon | U+1F349       | f0 9f 8d 89 | d83c df49  | 0001f349 |\n\n: Table 4. Food-fruit emoji codes and equivalent encoded representations {.striped .hover}\n\nIn general, UTF-8 is the most suitable option for web pages and computer programs. The reason is only pragmatic because it makes the web engines and text editors and parsers work well when consuming most html, Javascript, and general purpose computer languages.\n\nThe Windows operating system uses APIs that handle the UTF-8 to UTF-16 conversion internally. In that way application code can pass UTF-8 encoded to the operating system.\n\n### More definitions\n\nWe are not done with definitions yet. Some additional considerations are necessary to process text correctly, for this a detailed reading of the Unicode standard is advised @uni16:texthandling. I will focus first on the difference between characters and glyphs.\n\nA character is an abstract representation of a concrete mark made on paper or rendered to a computer screen, a so-called glyph. The character is the Unicode value that matches a glyph by convention.\n\nThe standard defines how to represent and how to identify a text character as a code point, however it does not provide rules for determining what a valid text element is because that depends on what the context is. Examples of context are capitalization for a title in English text, or the brake down of long sequences of characters at the end of text lines.\n\nA text unit, thus is a valid sequence of one or more encoded text characters @uni16:texthandling.\n\n### Algorithms for text encoding\n\nI will spare the reader with the specifics of these algorithms to go from code point to any of the encodings. A easy to follow example of these algorithms can be found elsewhere, I like the rich examples from this website: [utf-8 encode-decode](https://convertcodes.com/utf8-encode-decode-convert-string/). If you follow those examples you will realize a text processing program needs a table of code points to glyphs, and an algorithm to encode code points to code units and the reversal.\n\n## Why does all of this matter?\n\nText is used in the web and operating systems for any language, even for pseudo-languages like modern emojis. We have come to expect web apps, web sites, and our computers and mobile devices to be able to display our language and emojis correctly.\n\nThe programs that process text have to be break it down into its smallest components and then interpreted it as groups of characters that form words and punctuation, whole sentences, and whole paragraphs. And this has to work for any language supported by the software.\n\nI am avoiding the discussion on general rules for displaying numbers, dates, and so on, commonly included in the definition of the locale used by a computer. Keeping the focus exclusively on text, the main technique to process it is called **text boundary analysis**. In a nutshell, this is about finding where lines can be wrapped for display, where sentences end, how to move a cursor for one word to the next, how to find words and count them, how to move the cursor one character at a time, etc. The ICU has an excellent explanation of it in its [page on this subject](https://unicode-org.github.io/icu/userguide/boundaryanalysis/#overview-of-text-boundary-analysis).\n\n## Simple character boundary examples\n\nI will present examples of character boundary identification in different computer languages. We will limit the scope to identifying emoticons mixed in with text for rendering text using UTF-8 encoding as most modern editors and terminals would do.\n\nI will be using emojis from the food-fruit category, as defined in the Unicode standard chart shown in the figure below.\n\n![Figure 3. The table for the food-fruit emoji category taken from the Unicode standard chart @uni16:emojicharts](Food-fruit-unicode-emoji-chart.png)\n\n### C++\n\nThe platform agnostic support for UTF-8 in C++ 20 is not quite as simple as in other modern computer languages. POSIX operating systems like Linux work with UTF-8 out of the box. However Windows uses UTF-16 internally, making every system call dependent on text encoding translations. Thankfully those translations are hidden under Windows API calls.\n\nThere is a C/C++ library for handling Unicode from the International Components for Unicode, ICU for short. This organization sits under the same umbrella of Unicode, Inc. The library is old judging by the 25 year-ago commits as of the time of writing. However, it is still maintained and it has been moved to GitHUb where it has a modern CI/CD pipeline. Furthermore the more modern Boost locale library uses the ICU libraries under the hood. These libraries are used by Linux packages everywhere to support internationalization.\n\nIn particular there is an ICU project that showcases the applications of the library through web pages for interactive text manipulation. The app for text segmentation is quite interesting. The app is hosted in [icusegments-demo](https://icu4c-demos.unicode.org/icu-bin/icusegments#3/en). The source code can be found in [icu-demos](https://github.com/unicode-org/icu-demos) in GitHub.\n\nI found that the pages are quite slow at certain times of day, using them is easier late at night in the North American time zones. Below is a successful test of the target sentence I want to parse by *grapheme cluster*, what we as users would identify as characters on the screen.\n\n![Figure 2. The result from segmenting the test sentence using Unicode character boundaries using the web page at [icusegment](https://icu4c-demos.unicode.org/icu-bin/icusegments#0/en__ULI).](ICU_segments_sample.png)\n\n<!-- The ICU libraries are everywhere in a Ubuntu operating system. -->\n\n<!-- A quick search of one component shows it is packaged by many susbsystems: -->\n\n<!-- Mon Feb 03, 01:15:15; pablo@XPS13:/usr/local/lib/cmake  -->\n\n<!-- $ find / -type f -name libicuuc* 2>/dev/null -->\n\n<!-- /snap/kf5-5-113-qt-5-15-11-core22/1/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/cups/1058/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/cups/1067/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/gnome-42-2204/176/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/gnome-42-2204/202/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/kf6-core22/40/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/kf6-core22/41/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/gnome-3-38-2004/140/usr/lib/x86_64-linux-gnu/libicuuc.so.66.1 -->\n\n<!-- /snap/gnome-3-38-2004/143/usr/lib/x86_64-linux-gnu/libicuuc.so.66.1 -->\n\n<!-- /snap/kf5-5-110-qt-5-15-11-core22/3/usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /snap/mesa-2404/44/usr/lib/i386-linux-gnu/libicuuc.so.74.2 -->\n\n<!-- /snap/mesa-2404/44/usr/lib/x86_64-linux-gnu/libicuuc.so.74.2 -->\n\n<!-- /snap/mesa-2404/143/usr/lib/i386-linux-gnu/libicuuc.so.74.2 -->\n\n<!-- /snap/mesa-2404/143/usr/lib/x86_64-linux-gnu/libicuuc.so.74.2 -->\n\n<!-- /usr/lib/x86_64-linux-gnu/libicuuc.so.70.1 -->\n\n<!-- /usr/lib/x86_64-linux-gnu/libicuuc.a -->\n\n<!-- /usr/lib/x86_64-linux-gnu/libicuuc.so.74.2 -->\n\n<!-- /home/pablo/git/CPP/icu/icu4c/source/lib/libicuuc.so.77.0.1 -->\n\n<!-- /home/pablo/.dropbox-dist/dropbox-lnx.x86_64-216.4.4420/libicuuc.so.42 -->\n\n<!-- /opt/zoom/Qt/lib/libicuuc.so.56 -->\n\n### Building the ICU library\n\nThe ICU library can be installed in a Ubuntu system either from the upstream repository through the package manager or by getting it from sources, then building and installing it locally. The last option is also available in a Windows operating system. Multiple versions can coexist simultaneously.\n\nAfter cloning the project from [ICU](https://github.com/unicode-org/icu/tree/main), one can follow the steps in [building-icu4c](https://unicode-org.github.io/icu/userguide/icu4c/build.html) to configure, build and install the version 77.0.1 as of the date of this writing. A minimal working example was then build using CMake. The only caveat is to explicitly link the ICU shared libraries necessary, as an example, using the GNU toolchain on Linux: `g++ your_file.cpp -o your_program -licuio -licui18n -licuuc`, for a program that needs the `libicuio.so`, `libicui18n.so`, and `libicuuc.so` shared libraries.\n\n### The C++ test driver code\n\nAs far as the code goes, below is a first attempt at illustrating what analysis we want to do. We want to segment an UTF-8 string with variable width code units that represent a blend of plain English ASCII and some emojis.\n\n``` cpp\nint main(int argc, char **argv)\n{\n    std::vector<std::string> fruit;\n    fruit.push_back(\"🍇\");\n    fruit.push_back(\"🍈\");\n    fruit.push_back(\"🍉\");\n    fruit.push_back(\"🍊\");\n    fruit.push_back(\"🍋\");\n\n    std::string test_string = fruit[0];\n\n    std::string long_fruity_string = \"Hello \" + test_string + \", \" + fruit[1] + \"!\";\n    \n    //Note: Since C++17 and ICU 76, you can use UTF-16 string literals with compile-time\n    //      length determination. \n    const icu::UnicodeString str = icu::UnicodeString::fromUTF8(long_fruity_string);\n    std::string st;\n    str.toUTF8String(st);\n    std::cout << \"Sentence to parse: \\\"\" << st << \"\\\"\" << std::endl;\n\n    UErrorCode err = U_ZERO_ERROR;\n    \n    std::unique_ptr<icu::BreakIterator> iter(\n        icu::BreakIterator::createCharacterInstance(icu::Locale::getDefault(), err));\n    assert(U_SUCCESS(err));\n    iter->setText(str);\n    auto start = iter->first();\n    auto end = start;\n    std::string charToPrintUTF8{};\n    auto ctp = icu::UnicodeString{};\n    while (iter->next() != icu::BreakIterator::DONE) {\n        start = end; // set start of the current grapheme before a pass throught the loop\n        end = iter->current(); // update the end position of the current grapheme boundary found via iter->next \n        auto len = end - start; // in code units containing a grapheme\n        charToPrintUTF8.clear(); \n        ctp = str.tempSubString(start, len); \n        ctp.toUTF8String(charToPrintUTF8);\n        auto grapheme = len<2? std::string{charToPrintUTF8.front()}: charToPrintUTF8;\n        std::cout << \"Code units: \" << len << \"; grapheme: '\" << grapheme << \"' of \" << charToPrintUTF8.length() << \" bytes\" << std::endl;\n    }\n    return 0; \n}\n```\n\nThe output is shown below when this code is compiled using the GNU compiler g++ 13.3 using the C++17 standard, the ICU libraries version 77.0.1 (built from latest GitHub as of this writing), *CMake* version 3.28.3 for the build system, and Ubuntu 24.04 for the Linux operating system. The output was edited to remove unnecessary details, linking to the ICU libraries is not a simple job, there is a learning curve to go through. The pay off for this complexity is a lot of control in the output.\n\n```         \n$ cmake ../ -DCMAKE_BUILD_TYPE=Debug\n-- The C compiler identification is GNU 13.3.0\n-- The CXX compiler identification is GNU 13.3.0\n...\n-- Found the following ICU libraries:\n--   data (required): /usr/local/lib/libicudata.so\n--   uc (required): /usr/local/lib/libicuuc.so\n--   i18n (required): /usr/local/lib/libicui18n.so\n--   io (required): /usr/local/lib/libicuio.so\n-- Found ICU: /usr/local/include (found suitable version \"77.0.1\", minimum required is \"77.0\") \n-- Configuring done (0.4s)\n-- Generating done (0.0s)\n-- Build files have been written to: /home/pablo/git/CPP/character_boundaries/build-debug\nThu Jan 30, 21:48:26; pablo@XPS13:~/git/CPP/character_boundaries/build-debug \n$ make\n[ 50%] Building CXX object CMakeFiles/cbd.dir/main.cpp.o\n[100%] Linking CXX executable cbd\n[100%] Built target cbd\nThu Jan 30, 22:58:20; pablo@XPS13:~/git/CPP/character_boundaries/build-debug [main]\n$ ./cbd\nSentence to parse: \"Hello 🍇, 🍈!\"\nCode units: 1; grapheme: 'H' of 1 bytes\nCode units: 1; grapheme: 'e' of 1 bytes\nCode units: 1; grapheme: 'l' of 1 bytes\nCode units: 1; grapheme: 'l' of 1 bytes\nCode units: 1; grapheme: 'o' of 1 bytes\nCode units: 1; grapheme: ' ' of 1 bytes\nCode units: 2; grapheme: '🍇' of 4 bytes\nCode units: 1; grapheme: ',' of 1 bytes\nCode units: 1; grapheme: ' ' of 1 bytes\nCode units: 2; grapheme: '🍈' of 4 bytes\nCode units: 1; grapheme: '!' of 1 bytes\n```\n\nIt is non-trivial to find the character boundaries in C++. The ICU **BreakIterator** for characters and its functions **next()** and **current()** apply rules for grapheme cluster identification based on the locale and the Unicode pages for the glyphs. When **UnicodeString** object is parsed into these *graphemes* and an individual one is converted to UTF-8 we observe that the regular letters of the English alphabet, the white space and the punctuation characters use 1 byte, as expected, while the fruit *emojis* take 4 bytes, also as expected.\n\nThe reader is invited to look under the hood to the complexity in the parsing algorithm to identify these *grapheme* clusters. This kind of software is infrastructure that has to remain hidden so we can communicate using all of our languages and all of the emojis of the world in our devices.\n\nThe reader is also invited to look up this [Stack Overflow answer](https://stackoverflow.com/a/45581810/1585486) on doing exactly the same character segmentation exercise in C++ using the **Boost** library and its module called **locale**. It has a more modern interface in terms of function names and paradigm. However, as I mentioned earlier, it relies on the ICU libraries to do the detailed work. I like it that it uses the term **boost::locale::boundary::character** as the function to map over an UTF-8 string using an object of type **boost::locale::boundary::csegment_index**. It is all in the naming!\n\nA caveat though, to be able to use **Boost locale** and the ICU libraries in the same executable their versions must match. The default Ubuntu 24.04 system Boost (v1.83) and ICU libraries (v74) did not match out out of the box because the Boost locale v1.83 was built with ICU v77. There is enough material for a full post on that subject alone.\n\n### Rust\n\nIn Rust I used the crate `emojis` from the official public registry. A `crate` is a module in Rust. For more details consult the free [cargo online book](https://doc.rust-lang.org/cargo/index.html).\n\nThe code creates a short vector with the first 5 elements of the Unicode emojis in the Food and Drink group. Then it creates a Rust String by concatenating String slices in UTF-8. It follows by using the magic of the String function `chars` to find the character boundaries and to print them one by one. The 'magic' comes from the fact that some of these characters have multiple code unit representations in UTF-8, the default this is the Unicode form used by the Rust String data type, regardless of the operating system.\n\nIn other words the function has to parse the byte sequence and using the UTF-8 decoding rules find whole characters, using the rules shown in Table 1. Once the base 16 Unicode code points are found a rendering function has to find them in a table and create the matching glyph on the terminal for printing.\n\nFinally, the binary sequence for the whole sentence is printed to the terminal.\n\n``` rust\nextern crate emojis;\n\nfn main() {\n    let fruit: Vec<_> = emojis::Group::FoodAndDrink.emojis().map(|e| e.as_str()).take(5).collect();\n    assert_eq!(fruit, [\"🍇\", \"🍈\", \"🍉\", \"🍊\", \"🍋\"]);\n    \n    let test_string = String::from(fruit[0]);\n    let long_fruity_string = \"Hello \".to_owned() + &test_string + \", \" + fruit[1] + \"!\"; \n    \n    println!(\"\\\"{}\\\"\", long_fruity_string);\n\n    for letter in long_fruity_string.chars() {\n        println!(\"{letter}\");\n    }\n    let mut long_fruity_string_in_binary = \"\".to_string();\n\n    for character in long_fruity_string.clone().into_bytes() {\n        long_fruity_string_in_binary += &format!(\"0{:b} \", character);\n    }\n    println!(r#\"\"{}\" in binary is \"{}\"\"#, long_fruity_string, long_fruity_string_in_binary);\n}\n```\n\nThe output:\n\n```         \n$ cargo run\n   Compiling character_boundary v0.1.0 (/home/pablo/git/Rust/rust-practice/character_boundary)\n    Finished `dev` profile [unoptimized + debuginfo] target(s) in 0.41s\n     Running `target/debug/character_boundary`\n\"Hello 🍇, 🍈!\"\nH\ne\nl\nl\no\n \n🍇\n,\n \n🍈\n!\n\"Hello 🍇, 🍈!\" in binary is \"01001000 01100101 01101100 01101100 01101111 0100000 011110000 010011111 010001101 010000111 0101100 0100000 011110000 010011111 010001101 010001000 0100001 \"\n```\n\nRemember the rules for representing UTF-8 encoded bytes from standard Unicode points? Here are the first four of the last five bytes of the sentence: `11110000 10011111 10001101 10001000`, after removing the initial 0 that indicates binary numbers. Observe that these correspond to the 4 bytes of the multi-byte encoded character for the melon emoji: 🍈, with Unicode value U+1F348, and with value in UTF-8 encoding in hexadecimal as f0 9f 8d 88 (from Table 3).\n\n### Python\n\nPyhton 3 was a re-write of Python 2 in great part to make the language Unicode aware, therefore it is no surprise that it is one the most straight forward codes for our character boundary discovery exercise.\n\n``` python\n#!/usr/bin/env python3\n \ndef print_each_grapheme( unicode_string: str):\n    \"\"\" \n    prints each unicode grapheme cluster\n    \"\"\"\n    [print(c) for c in unicode_string]\n\n\nif __name__ ==\"__main__\":\n    \"\"\"\n    runs the script when called as a stand alone\n    \"\"\"\n    fruits = u\"🍇🍈🍉🍊🍋\"\n    test_string = fruits[0]\n    long_fruity_string = \"Hello \" + test_string + \", \" + fruits[1] +\"!\"\n    print_each_grapheme(long_fruity_string)\n```\n\nPython 3 extends the concept of a string to an array of Unicode grapheme clusters. This facilitates character boundary identification using the idiomatic list comprehension syntax and a string iterator. Under the hood the iterator is using Unicode code pages. The output is as expected.\n\n```         \n$ ./main.py \nH\ne\nl\nl\no\n \n🍇\n,\n \n🍈\n!\n```\n\n### R\n\nR has the `emoji` package. After a short exploration of its manual @r-package:emoji it is possible to print the characters of a sentence using the fruit emojis by identifying their boundaries boundaries seamlessly.\n\n``` r\ninstall.packages(\"emoji\")\nlibrary(\"emoji\")\nfruit <- emojis[ emojis$name %in% c(\"grapes\", \"watermelon\", \"melon\", \"lemon\", \"tangerine\"),]$emoji\ntest_string <- fruit[1]\nlong_fruity_string <- paste(\"Hello \", test_string,\", \",fruit[2], \"!\" )\npaste(long_fruity_string)\nresults <- strsplit(x = long_fruity_string, split = \"\")\n#'strsplit' returns a list in case x has multiple strings to be processed, we grab only the first one\nresults[[1]]\n```\n\nProduces the following output, a vector of characters, due to R's native focus on vectorized operations:\n\n```         \n [1] \"Hello  🍇 ,  🍈 !\"\n [1] \"H\"  \"e\"  \"l\"  \"l\"  \"o\"  \" \"  \" \"  \"🍇\" \" \"  \",\"  \" \"  \" \"  \"🍈\" \" \"  \"!\"\n```\n\n### Character boundary identification complexity\n\nOne might be tempted to think that character boundary is always a simple task. By simple I mean, decode the bytes into Unicode code points, look them up in tables, render each. However some languages have special symbols to compose the individual glyphs into sentences, these have to be identified and decomposed. To illustrate this look at the python and Rust examples below.\n\nThe text comes from this Stack Overflow question [cross-platform-iteration-of-unicode-string-counting-graphemes-using-icu](https://stackoverflow.com/q/4579215/1585486). It is a Hindi word written in the Devanagari script. Two of the Rust `char` type components of this UTF-8 string are diacritic symbols that don't have meaning on their own.\nAs explained in @brownrustbook:utf8-with-strings, one cannot simply know how to slice the String in advance, this is known only until after it has been parsed and the number of full graphemes has been identified. \n\n``` python\n#!/usr/bin/env python3\n\nfrom main import print_each_grapheme\n\nif __name__ == \"__main__\":\n    test_word = \"नमस्ते\"\n    print_each_grapheme(test_word)\n```\n\nThe output is correct because the two combining marks are discovered correctly.\n\n![](SO_graphemes_with_combining_marks_python){height=\"100pt\"}\n\nRust does likewise:\n\n``` rust\nextern crate emojis;\n\nfn main() {\n    let tets_word = \"नमस्ते\";\n    println!(\"\\\"{}\\\"\", tets_word);\n\n    for letter in tets_word.chars() {\n        println!(\"{letter}\");\n    }\n}\n```\n\n![](SO_grapheme_identification_rust.png)\n\nNoticed the `char` elements at positions 3 and 5. They are not letters of this Hindi word, however they do help in composing the word. \nThey are not full graphemes but diacritic symbols.\n\n\n## Discussion\n\nCharacter boundary identification seems a trivial task when done over text written in simple Unicode characters like those from ASCII. However, it is an increasingly difficult task when glyphs don't map to the letter in an alphabet but instead, they map directly to higher order ideas like in many Asian languages, and in most emojis. In the latter cases, character boundary identification may require additional steps to assign meaning to the sequence of Unicode characters, especially when the glyphs are modified by adjacent special markers, like accent or combiner marks. For this the libraries of a specific computer language or even the ICU libraries may not be sufficient. This is a text processing specific task and it should probably be developed in application specific logic curated and maintained with emphasis on the cultural needs of the users. A potential exception to this is emoji semantic interpretation, a flag emoji only changes meaning according to geopolitical events and a sad face emoji represents the idea of sadness regardless of the language.\n\nOf the computer languages tested, Rust, Python, and R have a rich supply of modules for easy accessing Unicode glyphs by subject, and for parsing and finding character boundaries effectively. The ICU libraries in C++ have a more complex API. Boost C++ has a more modern API to interface with the ICU libraries. The non-standard Boost build process introduces additional complexity in the exact coordination of dynamically linked ICU libraries used to build Boost itself and used by the program directly. This becomes an issue only when building an executable where both ICU and ICU-dependent Boost locale libraries are used with dynamic linking to the ICU libraries. The challenge is to isolate the program build process from the operating system's own Boost and ICU libraries. Also there are potential collisions in ABI interface version used to build the ICU and the Boost libraries, the C++ standard (C++11, 17 or 20) for the Boost libraries and the executable, the ICU library order of inclusion (uc before i18n and data).\n\n## Conclusion\n\nText representation using Unicode values and encondings has become an invisible technical detail. Its standardization, maintenance, and enhancement is in the hands of a few experts, organized interest groups and users that drive their constant adaptation to modern communication via the web. The software developers working on application development to process data as text in languages other than English need to learn how to use APIs from libraries provided by their computer languages and/or operating systems. Every library either sources a Unicode approved library in C++ or Java for the complex tasks of encoding/decoding and for basic character boundary analysis. More complex logic must be developed by the application.\n\n<!-- The needs of the world have evolved in the last decades towards more internationalization through the Internet, personal computing and e-commerce on mobile devices, and a global supply chain of Open Source projects for software infrastructure and through an exponential production of modules in the most popular computer programming languages. -->\n\nIn my opinion, Rust and Python 3 had the best developer experience, perhaps as a reflection of their conscious decision to treat Unicode as a first class citizen and to become popular languages for modern application development.\n\nThe character segmentation examples used in this post are anything but an eye opener to the question of computer language selection to develop an application for non-English text processing. I can only speculate between a suspected trade off between interoperability with the ICU libraries and computer language specific properties like memory safety, curated packages, tooling support, community support, developer skills, among others.\n\n<!-- Python 3.0 was launched in 2008 and Rust 1.0 in 2015. Java was not tested here but the ICU project has dedicated Java libraries similar to the C/C++ libraries.  -->\n\nI hope this post has given the reader a feel for the size of the task of writing software that processes text as data in diverse languages. From human readable representation to binary data that can travel through wires, optic fibre, or electromagnetic waves, text is everywhere and it is not going away any time soon.\n\n### References\n\n::: {#refs}\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}