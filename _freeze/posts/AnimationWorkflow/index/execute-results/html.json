{
  "hash": "8ddb55b92c33e9b5928cb68bfa3f23a9",
  "result": {
    "markdown": "---\ntitle: \"How to create a GIF file from individual images\"\nauthor: \"Pablo Adames\"\ndate: \"2021-09-06\"\ncategories: [Visualization, R]\nbibliography: references.bib\ncsl: elsevier-vancouver.csl\nformat: html\nknitr:\n  opts_chunk: \n    collapse: true\n    comment: \"#>\"\n---\n\n\n## Why doing this?\n\nDo you ever feel like a plain graph is not sufficient to explain some trend in your data or the solution of a mathematical model? For those times, generating animations can be just what you need. They can also become visualization aids during data exploration or a means to explain observations to yourself and others. \n\nThis is by no means an exhaustive list of use cases, however, they are pretty common and their impact can be high. \nThe deliverable is an embedded moving graph for your presentation or web content. After all, if an image is worth a thousand words then an animation should be worth a bit more.\n\nThis workflow is the basis to create the visualizations used in this LinkedIn post @Padames:wager2021\n\n![Animation from the LinkedIn post referred to by @Padames:wager2021](thumbnail.gif)\n\nIn that post this animation was created using a simple but effective workflow.\n\n1. Run a numerical model using simulated input\n2. The output of each run is used to construct a plot.\n3. Each plot is saved to a PNG file.\n4. Then a GIF file is constructed with all the jpeg files.\n\nTo illustrate this workflow we will use simulation. \nOther use cases may be sensor data or any observed data.\n\n\n### Prepare the input data\n\nWhen applying this algorithm to a simulation, the input in Step 1 above usually comes from a pseudo random number generator in your language of choice.\nIn this case I used the following R code to generate the data before constructing the plots and the animation.\nThe code computes the cumulative profit or loss from repeatedly playing the same wager for a very long time.\nEventually the expected result should tend to zero for either wager 3 or 4.\n\n\n::: {.cell}\n\n```{.r .cell-code .numberLines}\nlibrary(lattice)\n\nnumsimulations = 20000\nnumframes = 30\n  \nset.seed(1892)\ndievalues = seq(1,6)\n\nfor (i in 1:numframes){\n  \n  die3 = sample(dievalues, numsimulations, replace=T)\n  die4 = sample(dievalues, numsimulations, replace=T)\n  \n  profit3 = 300*( die3>3 ) - 300*( die3<=3 )\n  profit4 = 150*( die4>2 ) - 300*( die4<=2 )\n  \n  runningprofit3 = cumsum(profit3) / seq(1, numsimulations)\n  runningprofit4 = cumsum(profit4) / seq(1, numsimulations)\n  \n  df3 <- data.frame(wager=rep(3,length(runningprofit3)), runningprofit=runningprofit3, tries=seq(1,numsimulations))\n  df4 <- data.frame(wager=rep(4,length(runningprofit4)), runningprofit=runningprofit4, tries=seq(1,numsimulations))\n  df <- rbind(df3, df4)\n  \n  # more code follows here to generate the plots and the jpeg files\n}\n```\n:::\n\n\nLine **3** sets the number of simulation points to 20,000 so we get sharp plots. \nLine **5** sets the number of frames that the animation will have. \nLine **6** defines a fixed value for reproducible results from the pseudo random number generator used by the `sample` function that will be used in lines 11 and 12.\nLine **7** defines the 6 possible results of rolling a single die.\nLine **9** starts a loop to generate the frames of the animation.\nIn lines **11** and **12** two vectors of 20,000 elements are created, each one simulates one roll of a fair die.\nThe code in lines **14** and  **15** create the two vectors of 20,000 elements, each represents the profit resulting from rolling the die once. Each throw is an independent event, thus their individual profit can be computed with the input vectors `die3` and `die4`.  \nLines **17** and **18** compute the cumulative profit or loss resulting from sequentially realizing the 20,000 wagers sequentially.  \n\nThe following code inspects some of the vectors generated above for each frame. \nR is a natively vectorized language, therefore no special libraries are necessary.\nThe library import statement in line **1** is for plot generation in a latter step.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(runningprofit3)\n#> [1] 20000\n\nhead(runningprofit3)\n#> [1] -300    0 -100    0   60  100\ntail(runningprofit3)\n#> [1] -2.925731 -2.910582 -2.895434 -2.880288 -2.895145 -2.880000\nhead(runningprofit4)\n#> [1] -300.0  -75.0    0.0   37.5   60.0   75.0\ntail(runningprofit4)\n#> [1] -1.822956 -1.815363 -1.830275 -1.845185 -1.860093 -1.852500\n```\n:::\n\n\nOne can see how the initial profit or loss can be large, however the net value tends to be near zero after many repetitions.\n\n### Construct plots with the output data\n\nThe graphic package Trellis is designed to work on data presented in the so-called long format. \nThe idea is that the dataframe with all the data has a column representing a categorical variable representing the subgroup the data belongs to. \nThis is a fundamental idea behind this package.\nThis plotting of many subgroups in a grid-like pattern is what is called facetting in ggplot2 terms.\n\n\n::: {.cell}\n\n```{.r .cell-code .numberLines}\n  df3 <- data.frame(wager=rep(3,length(runningprofit3)), runningprofit=runningprofit3, tries=seq(1,numsimulations))\n  df4 <- data.frame(wager=rep(4,length(runningprofit4)), runningprofit=runningprofit4, tries=seq(1,numsimulations))\n  df <- rbind(df3, df4)\n```\n:::\n\n\nIn lines **1** and **2** above, separate data frames each of 20,000 rows are created.\nIn line **3** they are stacked vertically together to form a single data structure with 40,000 rows.\n\nThe following calls to the first and last three lines of the dataframe illustrate the long format of the data.\nThe column wager represent the subgroup each row belongs to: wager 3 or 4.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df, n = 3)\n#>   wager runningprofit tries\n#> 1     3          -300     1\n#> 2     3             0     2\n#> 3     3          -100     3\ntail(df, n = 3)\n#>       wager runningprofit tries\n#> 39998     4     -1.845185 19998\n#> 39999     4     -1.860093 19999\n#> 40000     4     -1.852500 20000\n```\n:::\n\n\nWe are ready to plot using the lattice plotting package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwagerLabels = c(\"Wager 3\", \"Wager 4\")\n\nxyplot(runningprofit~tries, data=df,\n       groups = wager,\n       par.settings = list(superpose.line = list(col = c(\"blue\",\"red\"),\n                                                 lwd = 1)),\n       auto.key=list(space=\"top\", columns=2,\n                     text=c(\"Wager3 = 3(die>3) - 3(die<=3)\", \"Wager 4 = 1.5(die>2) - 3(die<=2)\"),\n                     title=\"Running profits from two different wagers\", \n                     cex.title=2,\n                     lines=TRUE, points=FALSE),\n       xlab=\"Tries\",\n       xlim = c(1, numsimulations),\n       scales=list(cex=c(1.1, 1.1), # increase font size\n                   x = list(log = T), \n                   y = list(log = F),\n                   alternating = 1,   # axes labels left/bottom \n                   tck = c(1,0)),   # ticks only with labels\n       ylab=\"Profit\",\n       ylim = c(-350, 350),\n       type=c(\"l\"),\n       panel=panel.superpose,\n       panel.groups = function( x, y, group.number,...) {\n         panel.abline( h=y[ which(y==0.0) ], lty = \"dotted\", col = \"black\")\n         panel.grid(v=-1, h=-1, lty=3)\n         xt <- x[x==log(min(x)+1)] # find first try\n         yt <- y[x==min(x)] # find the first profit  \n         panel.text(xt, yt, labels=wagerLabels[group.number], \n                    pos=4,  # show labels on right side of the point\n                    ...)\n         panel.xyplot(x,y,...)\n       }\n)\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/one-plot-1.png){width=672}\n:::\n:::\n\n\nAn important detail of the `lattice` package is that it allows the superposition of the two subgroups: wager 3 and 4 thanks to the `panel.superpose`. \nThis panel type allows to paint the two different sub-groups using a function that takes the group number to label the first point.      \nThe two line plots are positioned on the same x-y grid so we  can compare them more easily. \n\n\n\n### Saving the plot as a jpeg file\n\nThe plot object generated in the previous step lives in the computer memory as an R object while we run the R session.\nIn order to send it to the file system as a PNG file we have to use a combination of the function `png` and a the function `print`.\n\nFirst we call the `png` function to declare that when we use `print`, the output should be directed to the PNG output device. Then we save the plot into a variable and subsequently pass it to the function print.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npng(file=\"simwager%02d.png\", width=600, height=400)\n\nwagerLabels = c(\"Wager 3\", \"Wager 4\")\n\npp <- xyplot(runningprofit~tries, data=df,\n       groups = wager,\n       par.settings = list(superpose.line = list(col = c(\"blue\",\"red\"),\n                                                 lwd = 1)),\n       auto.key=list(space=\"top\", columns=2,\n                     text=c(\"Wager3 = 3(die>3) - 3(die<=3)\", \"Wager 4 = 1.5(die>2) - 3(die<=2)\"),\n                     title=\"Running profits from two different wagers\", \n                     cex.title=2,\n                     lines=TRUE, points=FALSE),\n       xlab=\"Tries\",\n       xlim = c(1, numsimulations),\n       scales=list(cex=c(1.1, 1.1), # increase font size\n                   x = list(log = T), \n                   y = list(log = F),\n                   alternating = 1,   # axes labels left/bottom \n                   tck = c(1,0)),   # ticks only with labels\n       ylab=\"Profit\",\n       ylim = c(-350, 350),\n       type=c(\"l\"),\n       panel=panel.superpose,\n       panel.groups = function( x,y,group.number,...) {\n         panel.abline( h=y[ which(y==0.0) ], lty = \"dotted\", col = \"black\")\n         panel.grid(v=-1, h=-1, lty=3)\n         xt <- x[x==log(min(x)+1)] # find latest year\n         yt <- y[x==min(x)] # find value at latest year\n         panel.text(xt, yt, labels=wagerLabels[group.number], \n                    pos=4,  # show labels on right side\n                    ...)\n         panel.xyplot(x,y,...)\n       }\n)\nprint(pp)\ndev.off()\n#> png \n#>   2\n```\n:::\n\n\nThen \nThis code creates a file  called `simwager01.png` in the current working directory for the R session.\nThe R function `png` accepts multiple pages for printing on the png device.\nIf the given string provided to it contains the `%d` in it, multiple files will be generated for each new page, see [the warnings section in r-documentation for the function `png`](https://www.rdocumentation.org/packages/grDevices/versions/3.4.1/topics/png) \n\nWe had left some details out of the code shown at the beginning of this post because it would have been a distraction then.\nWe must create a directory called animations from the project root path and then make it the current working directory as the first action in the script.\nBy doing this all the temporary PNG files can be deleted after the next step, the GIF animated file generation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (!require(\"pacman\")) install.packages(\"pacman\")\npacman::p_load(\"here\")\n\nsuppressWarnings(my_proj_path <- here())\n\nif (!file.exists(file.path(my_proj_path,\"animations\"))) {\n  dir.create(file.path(my_proj_path, \"animations\"))\n}\nsetwd(file.path(my_proj_path, \"animations\"))\n```\n:::\n\n\n\n\n### Creating the GIF animated file\n\nThe GIF file is created with the [`convert`](https://imagemagick.org/script/convert.php) program from the package ImageMagik via a system call.\nThe arguments assume that all PNG files in the current directory are meant to be part of the GIF output.\nThe order of the frames for the animation come from the digits included in the file names using the `%02d` when I calld the `png` function.\nThe last action is to cleanup by deleting all the PNG files from the folder. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem(\"/usr/bin/convert -delay 40 *.png wager_comp_sim.gif\")\n\nfile.remove(list.files(pattern=\".png\"))\n```\n:::\n\nThe delay argument sets the time pause between frames in centiseconds.\nThis makes the framerate approximately 2.5 frames per second. \n\n\n## Conclusion\n\nThe basic workflow for the creation of a GIF animated file has been presented with luxury of detail.\nOne has to consider four basic steps: organize the data whereas it is observed or simulated.\nThen create a meaningful plot that adresses the research question.\nThen create multiple PNG files and finally create the GIF file from the intermediary PNG files.\n\n\n### References\n\n::: {#refs}\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}