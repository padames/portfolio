---
title: "Animation to explain coupled time-series"
author: "Pablo Adames"
date: "2024-12-15"
categories: [Visualization, R, ggplot2]
bibliography: references.bib
csl: elsevier-vancouver.csl
---

I consider Edward E. Tufte one of the modern experts in data visualization. I attended one of his talks in Seattle in May 2019. All attendees walked away with a beautiful set of his most important books, while I left with the challenge of stuffing the set in my carry-on bag on the flight back to Calgary that night.

Aside from the pleasant experience and the wonderful books, I bring this up because Tufte introduces many clever and even beautiful examples of time series visualizations in his book "The Visual Display of Quantitative Information" (@Tufte:2001). He claims that visual excellence is achieved when one can convey an idea to an observer without taking too long, using the least amount of ink and printed space. This implies cramming the most information possible with the least use of resources without obscuring meaning or confusing the main idea.

One of the time-series examples is a facet grid plot representing the evolution of the rate of unemployment and inflation in several countries, see the figure below. The term "facet grid" is used in ggplot2 lingo to refer to a table of plots comparing different subgroups within the data. This is not your traditional time series plot.

Recently I was preparing a CalgaryR meetup presentation and reading the book by Hadley Wickham, the creator of ggplot2 (@Wickham:2016). To my surprise, the last example introducing the concept of plot geoms, just before presenting facet grids, matched the idea used in the subplots of the example mentioned by Tufte. I realized then that I had found a use case for animation to improve this visualization in the era of digital media. Allow me to explain in this post.

![Except of an example of multiple subplots per country for the multi-year behaviour of inflation and unemployment rates. Taken from page 48 of @Tufte:2001](thumbnail.jpg)

```{r loading-ggplot2, echo=FALSE, attr.warning=FALSE, message=FALSE}
## functional and vectorized single function from 
## https://stackoverflow.com/a/44660688/1585486

using<-function(...) {
  libs <- unlist(list(...))
  req  <- unlist(lapply(libs, require, character.only = TRUE))
  need <- libs[req == FALSE]
  if(length(need) > 0){ 
    install.packages(need)
    lapply(need, require,character.only = TRUE)
  }
}

using("ggplot2", "here", "plotly")
```

## The problem statement

To find a solution, let's first highlight the problem. To do so we will formulate a research question and gradually build up a graphical representation to answer it. To do this, we will walk through the example from Hadley Wickham's book on ggplot2 (@Wickham:2016).

We want to show that by pushing the tools to their maximum we reach a climax, a point where we are constrained by the lack of motion. At that point in the story, we will have the right context to present animation to uncover a hidden feature of our data set.

The problem is how confusing it can be to add time as a third variable in a plot where each point is the intersection of two variables at different times.

It is simple to represent a time series by drawing the variable on one axis and time on the other. Tufte has many creative examples from several authors using this principle in his book. The difficulty becomes visualizing two of those time series on the same graph.

A possible research question is what has been tried to address this limitation? 
And also, is there a novel approach to add visual dimensions to a flat X-Y plot without sacrificing visual excellence?  

## The `economics` data set

With the problem statement out of the way, let's move on to the .

These examples are re-used from section 2.6.5 of <https://ggplot2-book.org/getting-started#sec-line>.

The data set called `economics` from the ggplot2 package, has employment statistics on the US measured over the last 40 years up until 2015.

Here is a brief look at the first 5 out of `r nrow(economics)` rows of the dataframe `economics`.

```{r data-frame-economics, echo=TRUE}
data <- head(economics, n=5)
knitr::kable(data)
```

## Visualizing the Unemployment Rate

Let's first make a simple time series plot of the unemployment rate. This is a continuous variable that is computed with the ratio `unemploy/pop`.

In ggplot2 a frame defines the first mapping from variables to a space where the data will be represented. It is created with the function `aes()`. The obvious frame for this plot is defined by the two variables `date` and `unemploy / pop`. They are mapped to the x and y coordinates of a 2-D plane. The glyphs drawn over this frame will be lines between the data points located in the frame, they are created with the function `geom_line()`. This function defines a layer over the frame.

```{r running-separate-time-series-unemployment-rate, echo=TRUE}
library(plotly)
g <- ggplot(data = economics, mapping = aes(x = date, y = unemploy / pop)) +
  geom_line()
g <- ggplotly(g)
g
```

Technically speaking `unemploy / pop` represents the *"population rate of unemployment as a fraction of the population able to work that is unemployed"*, (<https://www.bls.gov/cps/cps_htgm.htm#definitions>)

## Visualizing the unemployment median duration in weeks

Another variable called `uempmed` from the same dataset tracks the median length of time in weeks of unemployment.

```{r running-separate-time-series-mean-time, echo=TRUE}
library(plotly)
g <- ggplot(economics, aes(date, uempmed)) +
  geom_line()
g <- ggplotly(g)
g
```

From these two plots one can observe the recent trend towards longer median unemployment time in the decade of 2010. There are also cycles of between 5 and 10 years of peak unemployment rates.

An interesting question is how these two time series correlate over time. Are there interactions between these two variables that we could observe in one plot?

## Visualizing both variables in the same plot

In ggplot2, the frame for a representation that shows both variables on an line plot can be defined by a mapping of each variable to the x and y coordinates of the plane. We can create two types of glyphs over it: one is points shown by a layer defined by `geom_point` to show the location of the variables at a point in time. The other type of glyph is lines to show the sequential trajectory, ordered by time, from one point to the next. This is captured by the layer `geom_path`. The figure below shows such a graph.

```{r path-plot-first-attempt}
library(plotly)
g <- ggplot(economics, aes(unemploy / pop, uempmed)) + 
  geom_path() +
  geom_point()
g <- ggplotly(g)
g
```

It is hard to understand the direction of time from the lines alone. For example, it is difficult to visualize where the first, the last, or any years in between have happened.

This can be addressed by adding a mapping from the property colour to the variable year in the layer `geom_point`. R uses a default colour scale to assign specific colours from a colour palette to years.\
The ggplot2 package defines the function `aes()` to create this many to many mapping.

```{r path-plot-time-direction-encoded-to-colour}
library(plotly)
year <- function(x) as.POSIXlt(x)$year + 1900
g <- ggplot(economics, aes(unemploy / pop, uempmed)) + 
  geom_path(colour = "grey50") +
  geom_point(aes(colour = year(date)))
g <- ggplotly(g)
g
```

The layer `geom_path` has a mapping from each line created between points to the same colour value indicated by the specification *"grey50"*. The syntax does not require the use of the `aes()` function. It is a many to one mapping.

This plot is a good attempt at representing the time dimension with a varying shade of colour. This is unsatisfactory because the lines get too tangled, making the direction of time unclear. This looks eerily similar to the example Tufte refers to in his book, the difference is that we don't print years near some of the dots. Instead we chose to use the shade of blue in the points as a way to convey information about the year.

## Animation to the rescue

We can get a more sophisticated visualization by using animation to explain how the two variables change simultaneously as time passes. In the following plot, the values of unemployment rate and median unemployment length in weeks are displayed for every year. By pressing the PLAY button, one sees the points for each year over the line trajectory, from beginning to end. One can use the slider to visualize the position of the variables for any given year.

```{r annimation, echo=TRUE, warning=FALSE}
library(plotly)
year <- function(x) as.POSIXlt(x)$year + 1900
p <- ggplot(economics, aes(unemploy / pop, uempmed)) + 
  geom_path(colour = "grey75") +
  geom_point(aes(colour = year(date), frame = year(date)))

fig <- ggplotly(p)

fig <- fig %>% animation_opts(1000,
                              easing = "elastic", 
                              redraw = FALSE )
fig <- fig %>% animation_button(x = 0.05, xanchor = "left",
                                y = 1.1, yanchor = "top")
fig <- fig %>% animation_slider(currentvalue = list(prefix = "YEAR ",
                                                    font = list(color="red")))
fig
```

From watching the motion of the annual data after pressing the Play button, one gets the sense that for the first 41 years the values of these two time series remained within the quadrant below the 15 week and to the left of 4% unemployment rate except for the years 1982 and 83.
Then after 2009 the median unemployment length in weeks has increased over and above any value of the previous years in the USA according to this dataset.

At this point an economist might formulate the research question, what was the cause of this change in mean time to regain employment status?
I would even suggest reviewing other available independent data sources, to confirm the existence of this trend.

As far as the exploratory work goes, this animation has achieved the introduction of a new dimension to represent the flow of time over the plane representing the two observed variables. \
Before the digital era the only alternative we would have was representing time progression with other dimensions like point color intensity or perhaps point diameter.

### References

::: {#refs}
:::
