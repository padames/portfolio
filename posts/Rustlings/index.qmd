---
title: "Rustlings installation changed"
author: "Pablo Adames"
date: "2025-08-30"
categories: [Rust, programming, learning, coding]
bibliography: references.bib
csl: elsevier-vancouver.csl
format: html
knitr:
  opts_chunk: 
    collapse: true
    comment: "#>"
---

# What is Rustlings?

[Rust](https://www.rust-lang.org/) has killer apps for systems programming, web servers, command-line tools, blockchain tools, game engines, networking and web assembly. However, a less spoken killer app of sorts is its welcoming and friendly community. 

This community creates and maintains resources for all newcomers through the free online book [The Rust Book](https://doc.rust-lang.org/stable/book/) and the accompanying set of exercises called  [Rustlings](https://rustlings.rust-lang.org/).

Rustlings exercises take you on a whirlwind tour through Rust land. It starts with the humble flats of variable declaration, drives you through the ambitious hills of multithreading syntax for fearless concurrency. It makes stops along the way on the valleys of traits and structs for complex data modelling, the streams of error definition to avoid exceptional behaviour from bumping the regular flow of execution when returning from functions, and the forests of iterators and smart pointers, where the canopy of simple ergonomic patterns allows you to get the job done in safety.

![The list of folders with Rust exercises in the Rustlings, v6.5.0.](Exercise_folders.png){width=35%}

# What does Rustlings do?

It is an interactive exercise framework. You work through the exercises one by one in sequential order or in any desired order by selecting the next exercise to work on from the full list. The framework keeps track of the exercises that have been solved successfully so you are aware of your progress. Each exercise has references to the section of the book being applied through the exercise. 

Rustlings exercises have tests or just the main function plus data structures, and incomplete or missing statements. Once the missing parts are filled in and the tests pass successfully, one can move on to the next or quit the program.

# Installation

This post is about the change that version 6 brought to this project. It used to be necessary to clone the GitHub repository to be able to install the Rustlings executable that started tracking the exercises as you solved them.

However, now there is no need to go through Github or even git to work on Rustlings.
The program became a package on crates.io after version 6. As such you can install it following the traditional recipe `cargo install rustlings`. After the installation you will have the following three folders in the rustlings directory:

![Three folders in the rustlings folder after installation. Exercises and solutions contain the same numbers of subfolders and files.](Main_folders_rustlings_6_5_install.png){width=30%}

Typing `rustlings init` at the shell while on the rustlings folder for the first time will complete the setup. To get information type `rustlings --help` and to just get you started working type `rustlings` and you will gte the interactive solving tracking mode. The actual coding part, necessary to solve the exercises is done on a second, separate terminal window where you can edit the exercise file the interctive session points you to. Any Interactive Development Environment, IDE, will do. VS Code is very popular these days, so you can start the interactive program on the terminal emulator window while using the regular editor windows to make the code changes on the exercise file until the interactive program tells you the exercise succesfully compiles and all tests pass. 

![One possible layout on VS Code. The text editor is on the left, opened on the file of the current exercise `variables5.rs`. On the right is the Rustlings interactive terminal session pointing to the compiler messages for the same file and the interactive menu at the bottom.](VSCode_layout.png)

One last caveat, if you execute a command `cargo install rustlings` on the top folder of a cloned fork of the Rustlings repo, you will see a helpful error indicating that this is not allowed anymore.  

![Result of forking the official Rustlings repo on GitHub, cloning it locally and then trying to initialize an installation of the crate.](Attempt_init_over_cloned_fork.png)


# Git and Github

Up to this point you are working on your machine and your solutions will be stored in the folder exercises. You cna check official solutions in the corresponding under the solutions folder. But what if you wanted to store your solutions to the exercises in your account in Github? You may want to do this to keep a backup of your work in the cloud. Also to transfer your files between machines, like a desktop and a laptop. Whatever the reasons, for this don't clone or fork the official Rustlings repo. Simply start a new repo on the machine where you installed Rustlings an setup a remote repo in GitHub. 

If, on the other side, you want and can contribute to the Rustlings project, then you need to follow the traditional GitHub fork, branch, pull-request workflow.
Usual contributions can be a new exercise to offer practice on a yet un-touched section of the book, or a genuine bug fix to something that you have found not working correctly.


![A simplified illustration of the traditional GitHub workflow for Open SOurce projects.](Repo_collaboration.svg)

# Conclusions

You don't have to fork or clone the official Rustlings repo on Github anymore if all you want is to learn Rust by practicing while you read the book. You may still use your GitHub account and plain git to backup your work and share your specific solutions with others if you choose to do so.

If you want to become a Rustlings project contributor then the traditional GitHub workflow for Open Source projects applies. In that case you need to fork, clone, branch, develop, pull-request and wait for the chanes to be merged into the official main after revised and approved.


